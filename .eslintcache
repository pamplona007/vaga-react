[{"F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\index.js":"1","F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\App.js":"2","F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\util\\firebaseUtils.js":"3","F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Layout\\Header.js":"4","F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Layout\\Nav.js":"5","F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Content\\Home.js":"6","F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Login.js":"7","F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Layout\\Layout.js":"8","F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Content\\Newcar.js":"9","F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Content\\Offers.js":"10","F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Content\\Singlecar.js":"11","F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Content\\Editcar.js":"12"},{"size":428,"mtime":1607869216189,"results":"13","hashOfConfig":"14"},{"size":1034,"mtime":1607869063212,"results":"15","hashOfConfig":"14"},{"size":451,"mtime":1607789470097,"results":"16","hashOfConfig":"14"},{"size":306,"mtime":1607810251135,"results":"17","hashOfConfig":"14"},{"size":395,"mtime":1607868789112,"results":"18","hashOfConfig":"14"},{"size":4275,"mtime":1607894700895,"results":"19","hashOfConfig":"14"},{"size":1131,"mtime":1607897889415,"results":"20","hashOfConfig":"14"},{"size":574,"mtime":1607810014692,"results":"21","hashOfConfig":"14"},{"size":6745,"mtime":1607885205512,"results":"22","hashOfConfig":"14"},{"size":5790,"mtime":1607895923346,"results":"23","hashOfConfig":"14"},{"size":3886,"mtime":1607895963563,"results":"24","hashOfConfig":"14"},{"size":10723,"mtime":1607895749221,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"10ew7eb",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},"F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\index.js",[],["55","56"],"F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\App.js",[],"F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\util\\firebaseUtils.js",[],"F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Layout\\Header.js",[],"F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Layout\\Nav.js",[],"F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Content\\Home.js",[],"F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Login.js",[],"F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Layout\\Layout.js",[],"F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Content\\Newcar.js",["57"],"import React from 'react'\r\nimport firebase from 'firebase';\r\nimport { Modal, Form, Button, Divider, Input, Upload, message, Row, Col, Spin } from 'antd'\r\nimport { db } from '../../util/firebaseUtils'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Newcar = () => {\r\n    const [ loading, setLoading ] = React.useState(false);\r\n    const [ files, setFiles ] = React.useState([]);\r\n    const navigate = useNavigate();\r\n    const { confirm } = Modal;\r\n    const uploadButton = (\r\n        <div>\r\n            <div className=\"ant-upload-text\">Upload</div>\r\n        </div>\r\n    );\r\n            \r\n\r\n    \r\n    const onFinish = values => {\r\n        if (files.length === 0) {\r\n            message.error('Adicione pelo menos uma imagem!');\r\n            return\r\n        }\r\n        setLoading(true)\r\n        values.images = [];\r\n        values.created = firebase.firestore.FieldValue.serverTimestamp();\r\n        values.views = 0;\r\n        files.forEach(file => {\r\n            const storageRef = firebase.storage().ref();\r\n            const imageName = `${values.brand}-${values.model}-${uuidv4()}`;\r\n            const imgFile = storageRef.child(`images/${imageName}.png`);\r\n            try {\r\n                const image = imgFile.put(file);\r\n                values.images.push(imageName);\r\n            } catch(e) {\r\n            }\r\n        });      \r\n        db.collection('cars').add(values)\r\n            .then(response => {\r\n                setLoading(false);\r\n                navigate('/app/admin');\r\n            })\r\n            .catch((error) => {\r\n                setLoading(false);\r\n                message.error('Houve um erro, tente novamente mais tarde');\r\n                console.log(error);\r\n            })\r\n    };\r\n    \r\n    const onFinishFailed = errorInfo => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col>\r\n                    <h1>Novo Carro</h1>\r\n                </Col>\r\n            </Row>\r\n            <Divider />\r\n            <Row>\r\n                <Col span={24}>\r\n                    <Spin spinning={loading}>\r\n                        <Upload\r\n                            name=\"car\"\r\n                            listType=\"picture-card\"\r\n                            className=\"car-uploader\"\r\n                            beforeUpload={file => {\r\n                                setFiles(() => [...files, file]);\r\n                                return false;            \r\n                            }}\r\n                            onRemove= {file => {\r\n                                return new Promise((resolve, reject) => {\r\n                                    confirm({\r\n                                        title: 'Tem certeza que deseja deletar este arquivo?',\r\n                                        onOk: () => {\r\n                                            let array = files;\r\n                                            if (array.indexOf(file.originFileObj) > -1) {\r\n                                                array.splice(array.indexOf(file.originFileObj), 1);\r\n                                                setFiles(array);\r\n                                            }\r\n                                            resolve(true);\r\n                                        },\r\n                                    })\r\n                                })\r\n                            }}\r\n                            // onChange={handleChange}\r\n                            // customRequest={customUpload}\r\n                            >\r\n                            {uploadButton}\r\n                        </Upload>\r\n                        <Divider />\r\n                        <Form \r\n                            name=\"newCarForm\" \r\n                            onFinish={onFinish} \r\n                            onFinishFailed={onFinishFailed} \r\n                            layout=\"vertical\" \r\n                            requiredMark='optional'\r\n                        >\r\n                            <Row gutter={16}>\r\n                                <Col xs={24} sm={24} md={12} lg={12}>\r\n                                    <Form.Item label=\"Marca\" name=\"brand\" rules={[{ required: true }]}>\r\n                                        <Input placeholder=\"Qual a marca do carro?\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Ano\" name=\"year\" rules={[{ required: true }]}>\r\n                                        <Input placeholder=\"Em que ano ele foi lanÃ§ado?\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Placa\" name=\"plate\" rules={[{ required: true }]}>\r\n                                        <Input placeholder=\"Qual a placa do carro?\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Quilometragem\" name=\"distance\" rules={[{ required: true }]}>\r\n                                        <Input placeholder=\"Quantos quimÃ´metros o carro possui?\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item>\r\n                                        <Button type=\"primary\" htmlType=\"submit\">\r\n                                            Enviar\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col xs={24} sm={24} md={12} lg={12}>\r\n                                    <Form.Item label=\"Modelo\" name=\"model\" rules={[{ required: true }]}>\r\n                                        <Input placeholder=\"E qual o modelo?\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Cor\" name=\"color\" rules={[{ required: true }]}>\r\n                                        <Input placeholder=\"Qual a cor do carro?\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"Cidade\" name=\"city\" rules={[{ required: true }]}>\r\n                                        <Input placeholder=\"Em que cidade ele foi emplacado?\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item label=\"PreÃ§o\" name=\"price\" rules={[{ required: true }]}>\r\n                                        <Input placeholder=\"Qual o preÃ§o que deste carro?\" />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </Spin>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Newcar","F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Content\\Offers.js",["58","59"],"import React from 'react'\r\nimport firebase from 'firebase'\r\nimport { Button, Row, Col, Divider, Space, Spin, List, Card, Radio } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\nimport { db } from '../../util/firebaseUtils'\r\nimport { EyeOutlined, ReloadOutlined, UnorderedListOutlined, TableOutlined } from '@ant-design/icons';\r\n\r\nconst Offers = () => {\r\n    const [ cars, setCars ] = React.useState([])\r\n    const [ loading, setLoading ] = React.useState(false)\r\n    const [ reload, setReload ] = React.useState('')\r\n    const [ layout, setLayout ] = React.useState(0)\r\n    const { Meta } = Card;\r\n    const IconText = ({ icon, text }) => (\r\n        <Space>\r\n            {React.createElement(icon)}\r\n            {text}\r\n        </Space>\r\n    );\r\n    \r\n    async function getImgRef(img) {\r\n        const storageRef = firebase.storage().ref();\r\n        const imgRef = storageRef.child(`images/${img}.png`)\r\n        let link;\r\n        await imgRef.getDownloadURL()\r\n            .then(url => {\r\n                link = url;\r\n            })\r\n        return link;\r\n    }\r\n\r\n    async function getCarData() {\r\n        setLoading(true)\r\n        let data = []\r\n        let rawCars;\r\n\r\n        await db.collection('cars').get()\r\n            .then(response => {\r\n                rawCars = response;\r\n        })\r\n\r\n        let i = 0\r\n        for (const car of rawCars.docs) {\r\n            let carData = car.data()\r\n            await getImgRef(carData.images[0]).then(result => {\r\n                let toTable = {\r\n                    key: `${rawCars.docs[i].id}`,\r\n                    model: `${carData.brand}, ${carData.model}`,\r\n                    year: `${carData.year}`,\r\n                    price: `R$ ${carData.price}`,\r\n                    avatar: result,\r\n                    views: carData.views\r\n                }    \r\n                data.push(toTable);\r\n            })\r\n            i++\r\n        }\r\n        \r\n        setCars(data)\r\n        setLoading(false)\r\n    }\r\n\r\n    function changeLayout(e) {\r\n        switch (e.target.value) {\r\n            case 'list':\r\n                setLayout(0)\r\n                localStorage.setItem('layout', 0)\r\n                break;\r\n            case 'grid':\r\n                setLayout(1)               \r\n                localStorage.setItem('layout', 1)\r\n                break;\r\n            default :\r\n                console.log('NÃ£o temos esse layout ;v');\r\n                break;\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        getCarData()\r\n        if (localStorage.getItem('layout')) {\r\n            setLayout(Number(localStorage.getItem('layout')))\r\n        }\r\n    }, [reload])\r\n\r\n    const grid = layout ? {\r\n        grid: {\r\n            gutter: 0,\r\n            column: 4,\r\n        }\r\n    } : ''\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col span={24}>\r\n                    <h1>Ofertas</h1>\r\n                </Col>\r\n            </Row>\r\n            <Divider />\r\n            <Row gutter={[0,16]}>\r\n                <Col span={24} className={'controls'}>\r\n                    <Space>\r\n                        <Radio.Group onChange={changeLayout} value={layout ? 'grid' : 'list'}>\r\n                            <Radio.Button value='grid'><TableOutlined /></Radio.Button>\r\n                            <Radio.Button value='list'><UnorderedListOutlined /></Radio.Button>\r\n                        </Radio.Group>\r\n\r\n                        <Button type=\"secondary\" shape=\"circle\" icon={<ReloadOutlined />} onClick={() => setReload(Math.random())} />\r\n                    </Space>\r\n                </Col>\r\n                <Col span={24}>\r\n                    <Spin spinning={loading}>\r\n                        <List \r\n                            itemLayout=\"vertical\"\r\n                            size=\"large\"\r\n                            {...grid}\r\n                            dataSource={cars}\r\n                            pagination={{\r\n                                pageSize: 10,\r\n                            }}\r\n                            renderItem={item => (\r\n                                <List.Item \r\n                                    key={item.key}\r\n                                    extra={layout ? '' : <Link to={`${item.key}`}><div className={layout ? 'img-avatar grid' : 'img-avatar'} style={{ backgroundImage: \"url(\" + item.avatar + \")\" }}></div></Link>}\r\n                                    actions={layout ? [] : [<IconText icon={EyeOutlined} text={item.views} key=\"views-number\" />]}\r\n                                >\r\n                                    {layout ? (\r\n                                        <Link to={`${item.key}`}>\r\n                                            <Card \r\n                                                size='small'\r\n                                                hoverable\r\n                                                cover={<img alt=\"example\" src={item.avatar} />}\r\n                                                actions={[<IconText icon={EyeOutlined} text={item.views} key=\"views-number\" />]}\r\n                                            >\r\n                                                <Meta title={item.model} description={item.price} />\r\n                                                <p></p>\r\n                                            </Card>\r\n                                        </Link>\r\n                                    ) : (\r\n                                        <List.Item.Meta title={<Link to={`${item.key}`}>{`${item.model}`}</Link>} description={item.price}/>\r\n                                    )}\r\n                                </List.Item>\r\n                            )}\r\n                        />\r\n                    </Spin>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Offers\r\n\r\n","F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Content\\Singlecar.js",["60"],"import React from 'react'\r\nimport firebase from 'firebase';\r\nimport { useParams } from 'react-router-dom';\r\nimport { db } from '../../util/firebaseUtils';\r\nimport { Carousel, Col, Descriptions, Image, Row, Spin, Typography, Space } from 'antd';\r\nimport { EyeOutlined } from '@ant-design/icons';\r\n\r\n\r\nconst Singlecar = () => {\r\n    const params = useParams();\r\n    const [ car, setCar ] = React.useState(null)\r\n    const [ images, setImages ] = React.useState([]);\r\n    const [ loading, setLoading ] = React.useState(false);\r\n    const { Title } = Typography;\r\n    const IconText = ({ icon, text }) => (\r\n        <Space>\r\n            {React.createElement(icon)}\r\n            {text}\r\n        </Space>\r\n    );\r\n\r\n    async function getImgRef(img) {\r\n        const storageRef = firebase.storage().ref();\r\n        const imgRef = storageRef.child(`images/${img}.png`)\r\n        let link;\r\n        await imgRef.getDownloadURL()\r\n            .then(url => {\r\n                link = url;\r\n            })\r\n        return link;\r\n    }\r\n            \r\n    async function getImages(imgArray) {\r\n        let uris = []\r\n        for (const img of imgArray) {\r\n            await getImgRef(img).then(result => {\r\n                uris.push(result)\r\n            })\r\n        }\r\n        setImages(uris)\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        setLoading(true)\r\n        db.collection('cars').doc(params.id).get()\r\n            .then(response => {\r\n                setCar({...response.data(), views: response.data().views + 1})\r\n                getImages(response.data().images)\r\n                db.collection('cars').doc(params.id).update({\r\n                    views: response.data().views + 1\r\n                })\r\n                setLoading(false)\r\n            })\r\n            .catch(error => {\r\n                console.log('Erro ao recuperar informaÃ§Ãµes '+error);\r\n            })\r\n    }, [])\r\n\r\n    const creationDate = car ? new Date(car.created.toMillis()).toLocaleDateString() : ''\r\n\r\n\r\n    return (\r\n        <>\r\n        <Spin spinning={loading}>\r\n            <Row gutter={[30, { xs: 8, sm: 16, md: 24, lg: 32 }]}>\r\n                <Col span={24}>\r\n                    <Carousel autoplay>\r\n                        {images.map((item, index) => (\r\n                            <div className='car-carrousel'><Image width='100%' className='car-img' src={item} /></div>\r\n                        ))}\r\n                    </Carousel>\r\n                </Col>\r\n            </Row>\r\n            <Row gutter={[30, { xs: 8, sm: 16, md: 24, lg: 32 }]}>\r\n                <Col>\r\n                    {car && (\r\n                        <>\r\n                            <Title>{car.brand}, {car.model}</Title>\r\n                            <Descriptions \r\n                                title={`R$ ${car.price}`}\r\n                                extra={\r\n                                    <div className=\"controls\">\r\n                                        <IconText icon={EyeOutlined} text={car.views} key=\"views-number\" />\r\n                                        <p>Criado em: {creationDate}</p>\r\n                                    </div>\r\n                            }\r\n                            >\r\n                                <Descriptions.Item label=\"Ano\">{car.year}</Descriptions.Item>\r\n                                <Descriptions.Item label=\"Cor\">{car.color}</Descriptions.Item>\r\n                                <Descriptions.Item label=\"Cidade\">{car.city}</Descriptions.Item>\r\n                                <Descriptions.Item label=\"Quilometragem\">{car.distance}</Descriptions.Item>\r\n                                <Descriptions.Item label=\"Placa\">{car.plate}</Descriptions.Item>\r\n                            </Descriptions>\r\n                        </>    \r\n                    )}\r\n                </Col>\r\n            </Row>\r\n        </Spin>\r\n        </>\r\n  )\r\n}\r\n\r\nexport default Singlecar\r\n\r\n","F:\\Cloud\\OneDrive\\Documentos\\Trabalhos\\Code\\Vaga ReactJs\\teste\\src\\components\\Content\\Editcar.js",["61","62"],"import React from 'react';\r\nimport firebase from 'firebase';\r\nimport { Modal, Button, Row, Col, Divider, Input, Form, Upload, Spin, message, Card } from 'antd'\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { db } from '../../util/firebaseUtils';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { DeleteOutlined } from '@ant-design/icons'\r\n\r\nconst Editcar = () => {\r\n    const params = useParams();\r\n    const [ car, setCar ] = React.useState(null);\r\n    const [ files, setFiles ] = React.useState([]);\r\n    const [ uploadedFiles, setUploadedFiles ] = React.useState([]);\r\n    const [ loading, setLoading ] = React.useState(false);\r\n    const [ reload, setReload ] = React.useState('');\r\n    const [ form ] = Form.useForm();\r\n    const navigate = useNavigate();\r\n    const { confirm } = Modal;\r\n    const uploadButton = (\r\n        <div>\r\n            <div className=\"ant-upload-text\">Upload</div>\r\n        </div>\r\n    );\r\n    \r\n    function showDeleteConfirm(id) {\r\n        confirm({\r\n            title: 'Realmente deseja deletar este arquivo?',\r\n            okText: 'Deletar',\r\n            okType: 'danger',\r\n            cancelText: 'Cancelar',\r\n            onOk() {\r\n                return deleteImg(id);\r\n            },\r\n        });\r\n    }\r\n\r\n    function deleteImg(id) {\r\n        return new Promise((resolve, reject) => {\r\n            db.collection(\"cars\").doc(params.id).update({\r\n                images: firebase.firestore.FieldValue.arrayRemove(id)\r\n            }).then(() => {\r\n                console.log(\"Document successfully deleted!\");\r\n                setReload(Math.random())\r\n                resolve(true)\r\n            }).catch((error) => {\r\n                console.error(\"Error removing document: \", error);\r\n                reject(true)\r\n            });\r\n        }).catch(() => console.log('Oops errors!'));\r\n    }\r\n\r\n    async function getImgRef(img) {\r\n        const storageRef = firebase.storage().ref();\r\n        const imgRef = storageRef.child(`images/${img}.png`)\r\n        let link;\r\n        await imgRef.getDownloadURL()\r\n            .then(url => {\r\n                link = url;\r\n            })\r\n        return link;\r\n    }\r\n\r\n    async function getImages(imgArray) {\r\n        let uris = []\r\n        for (const img of imgArray) {\r\n            await getImgRef(img).then(result => {\r\n                uris.push({\r\n                    img: img,\r\n                    url:result\r\n                })\r\n            })\r\n        }\r\n        return uris\r\n    }\r\n\r\n    const onFinish = values => {\r\n        if (files.length === 0) {\r\n            message.error('Adicione pelo menos uma imagem!');\r\n            return\r\n        }\r\n        setLoading(true)\r\n        files.forEach(file => {\r\n            const storageRef = firebase.storage().ref();\r\n            const imageName = `${values.brand}-${values.model}-${uuidv4()}`;\r\n            const imgFile = storageRef.child(`images/${imageName}.png`);\r\n            try {\r\n                const image = imgFile.put(file);\r\n                db.collection('cars').doc(params.id).update({\r\n                    images: firebase.firestore.FieldValue.arrayUnion(imageName)\r\n                }).then((response) => {\r\n                    console.log(response);\r\n                }).catch((error) => console.log(error))    \r\n            } catch(e) {\r\n            }\r\n        });\r\n        console.log('Salvando dados ' + values);\r\n        db.collection('cars').doc(params.id).update(values)\r\n            .then((response) => {\r\n                console.log(response);\r\n                setLoading(false)\r\n                navigate('/app/admin');\r\n            })\r\n            .catch((error) => console.log(error))\r\n    };\r\n    \r\n    React.useEffect(() => {\r\n        setLoading(true)\r\n        db.collection('cars').doc(params.id).get()\r\n            .then((response) => {\r\n                setCar(response.data())\r\n                getImages(response.data().images).then(result => {\r\n                    setUploadedFiles(result)\r\n                })\r\n                setLoading(false)\r\n            })\r\n            .catch(error => {\r\n                console.log('Erro ao recuperar informaÃ§Ãµes '+error);\r\n            })\r\n    }, [reload, params.id])\r\n\r\n    if (car) {\r\n        form.setFieldsValue({\r\n            brand: `${car.brand}`,\r\n            model: `${car.model}`,\r\n            year: `${car.year}`,\r\n            color: `${car.color}`,\r\n            plate: `${car.plate}`,\r\n            city: `${car.city}`,\r\n            distance: `${car.distance}`,\r\n            price: `${car.price}`,\r\n        });        \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col>\r\n                    <h1>Editando carro</h1>\r\n                </Col>\r\n            </Row>\r\n            <Divider />\r\n            <Spin spinning={loading}>\r\n            <Row gutter={16}>\r\n                {uploadedFiles && (\r\n                    uploadedFiles.map((item, index) => (\r\n                        <Col xs={12} sm={12} md={8} lg={6} xl={6}>\r\n                            <Card\r\n                                bodyStyle={{\r\n                                    backgroundImage: `Url(${item.url})`,\r\n                                    backgroundPosition: 'center',\r\n                                    backgroundSize: 'cover',\r\n                                    height: '220px',\r\n                                }}\r\n                                actions={[\r\n                                    <DeleteOutlined key=\"delete\" onClick={() => showDeleteConfirm(item.img)} />,\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                    ))\r\n                )}\r\n            </Row>\r\n            <Divider />\r\n            <Row>\r\n                <Col span={24}>\r\n                    <Upload\r\n                        name=\"car\"\r\n                        listType=\"picture-card\"\r\n                        className=\"car-uploader\"\r\n                        beforeUpload={file => {\r\n                            setFiles(() => [...files, file]);\r\n                            return false;            \r\n                        }}\r\n                        onRemove= {file => {\r\n                            console.log(file);\r\n                            return new Promise((resolve, reject) => {\r\n                                confirm({\r\n                                    title: 'Tem certeza que deseja deletar este arquivo?',\r\n                                    onOk: () => {\r\n                                        let array = files;\r\n                                        switch (true) {\r\n                                            case (array.indexOf(file) > -1):\r\n                                                array.splice(array.indexOf(file), 1);\r\n                                                setFiles(array);\r\n                                                console.log(files);    \r\n                                                break;\r\n                                            case (array.indexOf(file.originFileObj) > -1):\r\n                                                array.splice(array.indexOf(file.originFileObj), 1);\r\n                                                setFiles(array);\r\n                                                console.log(files);    \r\n                                                break;\r\n                                            default :\r\n                                                resolve(false);\r\n                                                return;\r\n                                        }\r\n                                        resolve(true);\r\n                                    },\r\n                                })\r\n                            })\r\n                        }}\r\n\r\n                        >\r\n                        {uploadButton}\r\n                    </Upload>\r\n                    <Divider />\r\n                    <Form \r\n                        layout='vertical' \r\n                        form={form} \r\n                        name=\"control-hooks\" \r\n                        onFinish={onFinish}\r\n                        requiredMark='optional'\r\n                    >\r\n                        <Row gutter={16}>\r\n                            <Col xs={24} sm={24} md={12} lg={12}>\r\n                                <Form.Item label=\"Marca\" name=\"brand\" rules={[{ required: true }]}>\r\n                                    <Input placeholder=\"Qual a marca do carro?\" />\r\n                                </Form.Item>\r\n                                <Form.Item label=\"Ano\" name=\"year\" rules={[{ required: true }]}>\r\n                                    <Input placeholder=\"Em que ano ele foi lanÃ§ado?\" />\r\n                                </Form.Item>\r\n                                <Form.Item label=\"Placa\" name=\"plate\" rules={[{ required: true }]}>\r\n                                    <Input placeholder=\"Qual a placa do carro?\" />\r\n                                </Form.Item>\r\n                                <Form.Item label=\"Quilometragem\" name=\"distance\" rules={[{ required: true }]}>\r\n                                    <Input placeholder=\"Quantos quimÃ´metros o carro possui?\" />\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    <Button type=\"primary\" htmlType=\"submit\">\r\n                                        Enviar\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col xs={24} sm={24} md={12} lg={12}>\r\n                                <Form.Item label=\"Modelo\" name=\"model\" rules={[{ required: true }]}>\r\n                                    <Input placeholder=\"E qual o modelo?\" />\r\n                                </Form.Item>\r\n                                <Form.Item label=\"Cor\" name=\"color\" rules={[{ required: true }]}>\r\n                                    <Input placeholder=\"Qual a cor do carro?\" />\r\n                                </Form.Item>\r\n                                <Form.Item label=\"Cidade\" name=\"city\" rules={[{ required: true }]}>\r\n                                    <Input placeholder=\"Em que cidade ele foi emplacado?\" />\r\n                                </Form.Item>\r\n                                <Form.Item label=\"PreÃ§o\" name=\"price\" rules={[{ required: true }]}>\r\n                                    <Input placeholder=\"Qual o preÃ§o que deste carro?\" />\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n            </Spin>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Editcar\r\n",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":35,"column":23,"nodeType":"69","messageId":"70","endLine":35,"endColumn":28},{"ruleId":"71","severity":1,"message":"72","line":45,"column":53,"nodeType":"73","messageId":"74","endLine":55,"endColumn":14},{"ruleId":"75","severity":1,"message":"76","line":84,"column":8,"nodeType":"77","endLine":84,"endColumn":16,"suggestions":"78"},{"ruleId":"75","severity":1,"message":"79","line":57,"column":8,"nodeType":"77","endLine":57,"endColumn":10,"suggestions":"80"},{"ruleId":"67","severity":1,"message":"68","line":87,"column":23,"nodeType":"69","messageId":"70","endLine":87,"endColumn":28},{"ruleId":"75","severity":1,"message":"81","line":119,"column":8,"nodeType":"77","endLine":119,"endColumn":27,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'image' is assigned a value but never used.","Identifier","unusedVar","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'rawCars', 'i'.","ArrowFunctionExpression","unsafeRefs","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'getCarData'. Either include it or remove the dependency array.","ArrayExpression",["85"],"React Hook React.useEffect has missing dependencies: 'getImages' and 'params.id'. Either include them or remove the dependency array.",["86"],"React Hook React.useEffect has a missing dependency: 'getImages'. Either include it or remove the dependency array.",["87"],"no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},"Update the dependencies array to be: [getCarData, reload]",{"range":"94","text":"95"},"Update the dependencies array to be: [getImages, params.id]",{"range":"96","text":"97"},"Update the dependencies array to be: [reload, params.id, getImages]",{"range":"98","text":"99"},[2620,2628],"[getCarData, reload]",[1871,1873],"[getImages, params.id]",[4173,4192],"[reload, params.id, getImages]"]